# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    cron_job_management: '%env(bool:CRON_JOB_MANAGEMENT)%'
    dynamic_templates: '%env(bool:DYNAMIC_TEMPLATES)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Command\ImageCheckCommand:
        public: true
        tags: ['console.command']

    App\Command\InitialiseDatabaseCommand:
        arguments: ['%kernel.project_dir%']

    App\Service\:
        resource: '../src/Service'
        public: true

    App\Service\CronJobService:
        arguments: ['%kernel.project_dir%', '%env(bool:CRON_JOB_MANAGEMENT)%']

    App\Security\AnonymousAuthenticator:
        arguments: [ '%env(APP_SECRET)%' ]

    App\EventListener\UserListener:
        tags:
        - { name: kernel.event_listener, event: kernel.request }
        - { name: kernel.event_listener, event: kernel.response }
        arguments: ['%env(APP_SECRET)%']

    app.config:
        alias: App\Service\ConfigService

    Symfony\Component\Security\Http\AccessMapInterface:
        alias: security.access_map
        public: true

    twig.extension.ansi:
        class: SensioLabs\AnsiConverter\Bridge\Twig\AnsiExtension
        tags:
        - { name: twig.extension }

    App\Twig\CarbonExtension:
        tags:
        - { name: twig.extension }

    App\Twig\ArrayExtension:
        tags:
            - { name: twig.extension }

    App\Twig\DatabaseLoader:
        tags:
        - { name: twig.loader }
        arguments: ['%env(bool:DYNAMIC_TEMPLATES)%']

    App\Security\ConditionallyPublicVoter:
        tags:
        - { name: security.voter }

    App\Service\FileService:
        arguments: ['%kernel.project_dir%']

#    get_set_method_normalizer:
#        class: Symfony\Component\Serializer\Normalizer\GetSetMethodNormalizer
#        public: false
#        tags: [serializer.normalizer]

    Symfony\Component\Security\Core\User\UserProviderInterface:
        alias: 'security.user.provider.concrete.users'

    App\Service\AbuseIpdbService:
        arguments: ['%env(ABUSEIPDB_API_KEY)%']
